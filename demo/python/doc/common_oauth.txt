Help on module common_oauth:

NAME
    common_oauth - common_oauth.py: configuration data and common classes and functions for the Dropbox Python OAuth API demo

FILE
    /Users/nick/Documents/Author/Conferences/2014-06-SPA/OAuth/demo/python/common_oauth.py

CLASSES
    __builtin__.object
        AccessData
        AppData
        HttpServices
    
    class AccessData(__builtin__.object)
     |  Dropbox OAuth access data (access token and user id)
     |  
     |  This class is used to store and manage the Dropbox Oauth access data.
     |  It includes methods to save the information to disk, and load previously-saved access data.
     |  It also includes methods to check for the presence of the file on disk.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, save_message='')
     |      Constructor
     |      @type save_message: string
     |      @param save_message: save_message message to be written to JSON file containing access token
     |  
     |  load(self)
     |      Load and return access data from access token file (which must exist)
     |  
     |  save(self)
     |      Save given access data to access token file (which will be overwritten)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  access_token_file_exists(silent=False)
     |      Check whether access token data exists (file has previously been saved with access token)
     |  
     |  delete_access_token_file()
     |      Delete the access token file and other control files
     |  
     |  print_access_token_file()
     |      Print contents of access token file
     |  
     |  wait_for_access_token_file(message_interval=5)
     |      Wait indefinitely until the access token file is found
     |      @type message_interval: int
     |      @param message_interval: interval between printing wait messages
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ACCESS_TOKEN_FILE = '/Users/nick/Documents/Author/Conferences/2014-06-...
    
    class AppData(__builtin__.object)
     |  Dropbox OAuth application data
     |  
     |  This class defines the Dropbox app key and secret for the demo app.
     |  It also defines some other useful information and URLs.
     |  See https://www.dropbox.com/developers/apps.
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  APP_KEY = '3i8xil7ewl5d4el'
     |  
     |  APP_NAME = 'bcs_spa_oauth_demo'
     |  
     |  APP_SECRET = '0cf79q7jwrp5sjx'
     |  
     |  APP_WEBSITE = 'https://www.dropbox.com/developers/apps/info/3i8xil7ewl...
    
    class HttpServices(__builtin__.object)
     |  HTTP data and service functions
     |  
     |  This class defines URLs and associated data needed to interact with Dropbox.
     |  It includes methods to manage the HTTPD session and to open a web browser for the user.
     |  NOTE THAT THIS DATA MUST MATCH THE INFORMATION ENTERED AT THE dROPBOX DEVELOPER CONSOLE FOR THE APP
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  clear_latest_url(self)
     |      Clear latest URL requested of HTTP server so next call returns empty string (delete latest URL file)
     |  
     |  delete_httpd_session_file(self)
     |      Delete the access token file and other control files
     |  
     |  expire_httpd_session(self)
     |      Expire the sesssion by renaming the session file to HTTPD_SESSION_FILE_EXPIRED
     |  
     |  load_httpd_session(self, expire_session=True)
     |      Load and return HTTPD session data from session data file (which must exist)
     |      @type expire_session: boolean
     |      @param expire_session: if True, also expire (rename) the session file
     |  
     |  load_latest_url(self)
     |      Load latest URL requested of HTTP server from latest URL file
     |  
     |  save_httpd_session(self)
     |      Save HTTPD session data to session data file (which will be overwritten)
     |  
     |  save_latest_url(self, url)
     |      Save latest URL requested of HTTP server to latest URL file.
     |      This is used in testing to see if a URL has been requested of the server
     |      @type url: string
     |      @param url: this URL will be saved in the latest URL file
     |  
     |  wait_for_latest_url_file(self, timeout=0)
     |      Wait for latest URL file to appear, return True when found or optionally timeout and return False.
     |      This is used in testing to see if a URL has been requested of the server
     |      @type timeout: int
     |      @param timeout: if non-zero, give up after waiting this number of seconds
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  open_browser_window(url)
     |      Open a window in the configured web browser
     |      @type url: string
     |      @param url: URL to open
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    time_now()
        return human-readable representation of the current date and time
        @rtype:  string
        @return: human-readable representation of the current date and time
    
    wait_for_file(file_path, message_interval=5, timeout=0)
        wait (indefinitely or with timeout) until file_path is found
        @rtype:  void
        @type file_path: string
        @param file_path: full path of file to wait for
        @type message_interval: int
        @param message_interval: interval between printing wait messages
        @type timeout: int
        @param timeout: if non-zero, give up after waiting this number of seconds

DATA
    BROWSER_NAME = 'safari'
    BROWSER_NEW_WINDOW = False
    DEMO_DIRECTORY = '/Users/nick/Documents/Author/Conferences/2014-06-SPA...
    DOC_DIRECTORY = '/Users/nick/Documents/Author/Conferences/2014-06-SPA/...
    FILES_DIRECTORY = '/Users/nick/Documents/Author/Conferences/2014-06-SP...
    handler = <logging.StreamHandler object>
    logger = <logging.Logger object>


