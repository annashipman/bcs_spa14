package oauth_demo;

import java.io.*;
import java.util.Locale;
import java.util.LinkedHashMap;
import java.util.Map;
import java.net.*;

import com.dropbox.core.*;

/**
 * This class provides methods which implement the Dropbox <i>No-Redirect</i> workflow:
 *
 * <ul>
 *    <li>{@code noRedirectClientStart} implements the <b>start</b> step.
 *    <li>{@code noRedirectClientFinishAndSave} implements the <b>finish</b> step,
 *    saves the access token, and creates some sample files to show everything is working.
 * </ul>
 *
 * These methods are both called by the client.
 *
 */
public class DropboxWorkflowNoRedirect {

    /** Dropbox client object used to call authorisation functions */
    public static DbxWebAuthNoRedirect noredirectClient;

    /** we don't ever instantiate this class but just call its methods statically */
    private DropboxWorkflowNoRedirect() {}

    /**
     * This method implements the <b>start</b> step of the Dropbox no-redirect workflow.
     *
     * <p>It performs the following steps:
     * <ol>
     *    <li>Create a {@code DbxAppInfo} object for the demo app.
     *    <li>Create a {@code DbxRequestConfig} object for the default locale.
     *    <li>Use these objects to create a {@code DbxWebAuthNoRedirect} object.
     *    <li>Call {@code DbxWebAuthNoRedirect.start()} to start the Oauth workflow.
     *    <li>Return the URL generated by {@code DbxWebAuthNoRedirect.start()} in a {@code DropboxStatus} object.
     * </ol>
     *
     * <p>The client will then take the user to the URL returned by {@code start()} so they can authorise with Dropbox.
     * The Dropbox website will generate an <b>authorisation code</b> which the user must copy to their clipboard
     * and paste into the client when prompted.
     *
     * @return DropboxStatus object which is initialised with the URL to which the user must be redirected to authorise with Dropbox.
     *
     * @see <a href="https://www.dropbox.com/developers/core/start/java">Using the Core API in Java</a>
     * @see DropboxStatus
     */
    public static DropboxStatus noRedirectClientStart() {
        ConsoleLogger.debug("starting Dropbox authorisation (no-redirect mode)");
        ConsoleLogger.debug("creating DbxWebAuthNoRedirect client for app %s with key %s and secret %s", AppData.APP_NAME, AppData.APP_KEY, AppData.APP_SECRET);

        DbxAppInfo appInfo = new DbxAppInfo(AppData.APP_KEY, AppData.APP_SECRET);
        DbxRequestConfig config = new DbxRequestConfig(AppData.APP_NAME_VERSION, Locale.getDefault().toString());
        noredirectClient = new DbxWebAuthNoRedirect(config, appInfo);

        ConsoleLogger.debug("created DbxWebAuthNoRedirect client, running start() to generate Dropbox authorisation URL");
        String authoriseUrl = noredirectClient.start();

        ConsoleLogger.info("Dropbox authorisation start successful, got authorisation URL %s", authoriseUrl);
        return new DropboxStatus(301, DropboxStatus.makeUrl(authoriseUrl));
    }

    /**
     * This method implements the <b>finish</b> step of the Dropbox no-redirect workflow.
     *
     * <p>The client has taken the user to the URL returned by {@code start()} and they have authorised with Dropbox.
     * The Dropbox website has generated an <i>authorisation code</i> which the user has copied to their clipboard
     * and pasted into the client when prompted.
     *
     * <p>It uses the {@code client} object created in {@code noRedirectClientStart()} to perform the following steps:
     * <ol>
     *    <li>Call {@code DbxWebAuthNoRedirect.finish()} to finish the Oauth workflow.
     *    <li>Call {@code AccessData.save()} to save the access token returned by {@code finish()}.
     *    <li>Call {@code DropboxTools.createSampleFiles()} to create some sample files in the Dropbox app folder.
     * </ol>
     *
     * @param securityCode the security code which was generated by Dropbox and pasted into the client
     *
     * @return AccessData object containing the access token returned by {@code finish()}
     *
     * @throws IOException if there is an error creating the token file
     * @throws DbxException if a Dropbox error occurs
     *
     * @see <a href="https://www.dropbox.com/developers/core/start/java">Using the Core API in Java</a>
     * @see AccessData
     */
    public static AccessData noRedirectClientFinishAndSave(String securityCode) throws IOException, DbxException {
        // this function implements the finish() portion of the Dropbox OAuth no_redirect flow
        ConsoleLogger.debug("finishing Dropbox authorisation (no-redirect mode), security code=%s", securityCode);

        DbxAuthFinish authFinish = noredirectClient.finish(securityCode);
        ConsoleLogger.info("Dropbox authorisation finish successful, access token=%s, user id=%s", authFinish.accessToken, authFinish.userId);
        AccessData accessData = new AccessData(authFinish.accessToken, authFinish.userId, "created using Java dropbox.client.DbxWebAuthNoRedirect()");
        accessData.save();
        DropboxTools.createSampleFiles();
        return accessData;
    }

}

